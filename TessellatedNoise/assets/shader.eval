#version 400

layout(triangles, equal_spacing, cw) in;

uniform mat4    ciViewMatrix;
uniform mat4    ciProjectionMatrix;
uniform mat4    ciModelMatrix;
uniform mat4 	ciViewMatrixInverse;
uniform float 	uTime;

in vec3 		tcPosition[];
out vec4       	teNoises;
out vec3       	teVsPosition;

/* Noise from Inigo Quilez
https://www.shadertoy.com/view/4sfGzS */
#define USE_PROCEDURAL
#ifdef USE_PROCEDURAL
float hash( float n ) { return fract(sin(n)*753.5453123); }
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}
#else
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
	f = f*f*(3.0-2.0*f);
	
	vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;
	vec2 rg = texture2D( iChannel0, (uv+0.5)/256.0, -100.0 ).yx;
	return mix( rg.x, rg.y, f.z );
}
#endif



float fbm( vec3 p, int octaves, float lacunarity, float gain )
{
    float result = 0.0f;
    float amp = 0.5f;
    float dx = 0.0f;
    for( int i = 0; i < octaves; i++ ) {
        float d = noise( p );
        dx += d;
        
        result += amp * d / ( 1.0f + dx*dx );
        p *= lacunarity;
        amp *= gain;
    }
    return result;
}

float fbm( vec3 p )
{
    return fbm( p, 5, 2.0f, 0.5f );
}

#define saturate(x) clamp(x, 0.0, 1.0)

void main()
{
    vec3 p0 		= gl_TessCoord.x * tcPosition[0];
    vec3 p1 		= gl_TessCoord.y * tcPosition[1];
    vec3 p2 		= gl_TessCoord.z * tcPosition[2];
    vec3 pos 		= p0 + p1 + p2;
    float noise0 	= 0.5 * fbm( pos * 25.0 + vec3( uTime * 0.1 ) ) * sin( uTime * 0.1 );
    float noise1 	= 3.0 * fbm( pos * 2.0 + vec3( uTime * 0.1 ), 5, -1.5, 0.25 );
    float noise2 	= 15.0 * fbm( pos * 0.4 + vec3( uTime * 0.05 ), 3, 2.5, 0.75 );
    float noise		= fbm( 5.0 * vec3( noise0, noise1, noise2 ) ) * ( cos( noise0 - noise1 ) + sin( noise2 ) ) * 1.125;
    //noise 			-= fbm( vec3( noise * 15.0 ) ) * 0.125;
    teNoises		= vec4( noise0, noise1, noise2, noise );

    vec3 position	= normalize( pos ) * ( 1.0 + noise );
    
    vec4 wsPosition	= ciModelMatrix * vec4( position, 1.0 );
    vec4 vsPosition	= ciViewMatrix * wsPosition;
	vec4 eyeDir		= vsPosition - vec4( 0, 0, 0, 1 );
	teVsPosition	= wsPosition.xyz;// -vec3( ciViewMatrixInverse * vec4( vsPosition.xyz, 0.0 ) );
	gl_Position 	= ciProjectionMatrix * vsPosition;
}
